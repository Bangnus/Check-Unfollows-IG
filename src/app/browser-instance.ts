import puppeteer from "puppeteer-extra";
import { Browser, Page, LaunchOptions } from "puppeteer";
import StealthPlugin from "puppeteer-extra-plugin-stealth";
import randomUseragent from "random-useragent";
import { config } from "@/app/config";

// ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Stealth Plugin ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Puppeteer
puppeteer.use(StealthPlugin());

let browserInstance: Browser | null = null;
let pageInstance: Page | null = null;
let lastActivityTime: number = Date.now();
let refreshInterval: NodeJS.Timeout | null = null;

/**
 * ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á instance ‡∏Ç‡∏≠‡∏á Browser
 * - ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä session ‡∏ó‡∏∏‡∏Å 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
 * - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
 * - ‡πÉ‡∏ä‡πâ Proxy server ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
 */
export const getBrowserInstance = async (): Promise<Browser> => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Browser ‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (browserInstance && Date.now() - lastActivityTime > 3 * 60 * 60 * 1000) {
        await closeInstances();
    }

    if (!browserInstance || !(await isBrowserConnected(browserInstance))) {
        const launchOptions: LaunchOptions & { ignoreHTTPSErrors?: boolean } = {
            headless: config.HEADLESS,
            args: [
                "--no-sandbox",
                "--disable-setuid-sandbox",
                "--disable-dev-shm-usage",
                "--disable-accelerated-2d-canvas",
                "--disable-gpu",
                "--disable-web-security",
                "--disable-features=IsolateOrigins,site-per-process",
                "--disable-blink-features=AutomationControlled",
                `--proxy-server=${config.PROXY_SERVER || ''}`
            ],
            ignoreHTTPSErrors: true,
        };

        browserInstance = await puppeteer.launch(launchOptions);
        setupRefreshInterval(); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï interval ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á Browser ‡πÉ‡∏´‡∏°‡πà
    }

    lastActivityTime = Date.now();
    return browserInstance;
};

/**
 * ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á instance ‡∏Ç‡∏≠‡∏á Page
 * - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ User-Agent ‡πÅ‡∏•‡∏∞ Viewport ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
 * - ‡∏ã‡πà‡∏≠‡∏ô Puppeteer ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
 */
export const getPageInstance = async (): Promise<Page> => {
    const browser = await getBrowserInstance();

    if (!pageInstance || pageInstance.isClosed()) {
        pageInstance = await browser.newPage();

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ User-Agent ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
        const userAgent = randomUseragent.getRandom();
        await pageInstance.setUserAgent(userAgent);

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Viewport ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
        await pageInstance.setViewport({
            width: 1280 + Math.floor(Math.random() * 100),
            height: 800 + Math.floor(Math.random() * 100),
            deviceScaleFactor: 1 + Math.random() * 0.5
        });

        // ‡∏ã‡πà‡∏≠‡∏ô Puppeteer ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        await pageInstance.evaluateOnNewDocument(() => {
            Object.defineProperty(navigator, "webdriver", { get: () => false });
            Object.defineProperty(navigator, "plugins", { get: () => [1, 2, 3, 4, 5] });
            Object.defineProperty(navigator, "languages", { get: () => ["en-US", "en"] });
        });
    }

    lastActivityTime = Date.now();
    return pageInstance;
};

/**
 * ‚úÖ ‡∏õ‡∏¥‡∏î Browser ‡πÅ‡∏•‡∏∞ Page instance ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô resource leak ‡πÇ‡∏î‡∏¢‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ instance
 * - ‡∏•‡πâ‡∏≤‡∏á interval ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
 */
export const closeInstances = async (): Promise<void> => {
    if (pageInstance && !pageInstance.isClosed()) {
        await pageInstance.close();
        pageInstance = null;
    }

    if (browserInstance && (await isBrowserConnected(browserInstance))) {
        await browserInstance.close();
        browserInstance = null;
    }

    if (refreshInterval) {
        clearInterval(refreshInterval);
        refreshInterval = null;
    }
};

/**
 * ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Browser ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * - ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö process ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
 */
async function isBrowserConnected(browser: Browser): Promise<boolean> {
    try {
        const browserProcess = browser.process();
        return !!browserProcess && !browserProcess.killed;
    } catch {
        return false;
    }
}

/**
 * ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Interval ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö inactivity ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä session
 * - ‡∏õ‡∏¥‡∏î Browser ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 30 ‡∏ô‡∏≤‡∏ó‡∏µ
 */
function setupRefreshInterval(): void {
    if (refreshInterval) {
        clearInterval(refreshInterval);
    }

    refreshInterval = setInterval(async () => {
        if (browserInstance && Date.now() - lastActivityTime > 30 * 60 * 1000) {
            console.log("üîÑ Refreshing session due to inactivity...");
            await closeInstances();
        }
    }, 5 * 60 * 1000); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
}

// ‚úÖ ‡∏õ‡∏¥‡∏î Browser ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
process.on("beforeExit", async () => {
    await closeInstances();
});
